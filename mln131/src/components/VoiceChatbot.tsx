import { useState, useRef } from "react";
import { GeminiClient } from "../services/GeminiClient";
import { motion, AnimatePresence } from "framer-motion";
import ReactMarkdown from "react-markdown";

// ‚ö†Ô∏è Khuy·∫øn ngh·ªã: n√™n d√πng bi·∫øn m√¥i tr∆∞·ªùng ƒë·ªÉ l∆∞u API key
const gemini = new GeminiClient("AIzaSyBOyExUS1i0kvI7jhV7MuYl1na1nLI4wNg");

interface ChatMessage {
  role: "user" | "bot";
  text: string;
}

const VoiceChatbot: React.FC = () => {
  const [input, setInput] = useState("");
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [speaking, setSpeaking] = useState(false);
  const [tab, setTab] = useState<"text" | "voice">("text");
  const [loading, setLoading] = useState(false);
  const [modalText, setModalText] = useState<string | null>(null);
  const [copyText, setCopyText] = useState<string>("Copy");
  const utterRef = useRef<SpeechSynthesisUtterance | null>(null);

  // D·ª´ng n√≥i khi chuy·ªÉn tab ho·∫∑c ƒëang ph√°t
  const handleTabChange = (newTab: "text" | "voice") => {
    if (loading) return;
    if (typeof window !== "undefined" && "speechSynthesis" in window) {
      window.speechSynthesis.cancel();
      setSpeaking(false);
    }
    setTab(newTab);
    setInput("");
    setMessages([]);
    setLoading(false);
  };

  // H√†m ƒë·ªçc gi·ªçng n√≥i
  const speak = (text: string) => {
    if (typeof window !== "undefined" && "speechSynthesis" in window) {
      window.speechSynthesis.cancel();
      setSpeaking(true);
      const utter = new window.SpeechSynthesisUtterance(text);
      utter.lang = "vi-VN";
      utter.rate = 1;
      utter.onend = () => setSpeaking(false);
      utter.onerror = () => setSpeaking(false);
      utterRef.current = utter;
      window.speechSynthesis.speak(utter);
    }
  };

  // ========= PROMPT CHU·∫®N H√ìA THEO FILE MLN131.docx =========
  const baseGuidelines = `
B·∫°n l√† **tr·ª£ l√Ω h·ªçc t·∫≠p** cho sinh vi√™n h·ªçc ph·∫ßn *MLN131 ‚Äì Ch·ªß nghƒ©a x√£ h·ªôi khoa h·ªçc*,
h·ªó tr·ª£ ch∆∞∆°ng: **‚ÄúD√¢n ch·ªß x√£ h·ªôi ch·ªß nghƒ©a t·∫°i Vi·ªát Nam: T·ª´ l√Ω lu·∫≠n ƒë·∫øn th·ª±c ti·ªÖn.‚Äù**

T√†i li·ªáu c∆° s·ªü: **Gi√°o tr√¨nh MLN131 (Ph∆∞∆°ng Nguy√™n & Qu·ª≥nh Qu·ª≥nh, 2025)** g·ªìm c√°c n·ªôi dung:
1. **B·∫£n ch·∫•t c·ªët l√µi:** ‚ÄúD√¢n l√† g·ªëc, d√¢n l√†m ch·ªß‚Äù ‚Äì quy·ªÅn l·ª±c thu·ªôc v·ªÅ nh√¢n d√¢n, d√¢n ch·ªß g·∫Øn v·ªõi ph√°p lu·∫≠t, to√†n di·ªán trong kinh t·∫ø, ch√≠nh tr·ªã, x√£ h·ªôi.  
2. **L·ªãch s·ª≠ h√¨nh th√†nh:** T·ª´ d√¢n ch·ªß nh√¢n d√¢n sau C√°ch m·∫°ng Th√°ng T√°m 1945 ƒë·∫øn d√¢n ch·ªß x√£ h·ªôi ch·ªß nghƒ©a sau th·ªëng nh·∫•t 1976.  
3. **C√°ch th·ª©c th·ª±c h√†nh:** D√¢n ch·ªß ƒë·∫°i di·ªán (Qu·ªëc h·ªôi, HƒêND) v√† d√¢n ch·ªß tr·ª±c ti·∫øp (ng∆∞·ªùi d√¢n tham gia b√†n, gi√°m s√°t, ph·∫£n bi·ªán qua quy ch·∫ø d√¢n ch·ªß c∆° s·ªü, chuy·ªÉn ƒë·ªïi s·ªë, C·ªïng DVC qu·ªëc gia...).  
4. **K·∫øt lu·∫≠n:** D√¢n ch·ªß XHCN l√† th√†nh qu·∫£ c·ªßa c√°ch m·∫°ng, ph·∫£i g·∫Øn m·ªü r·ªông d√¢n ch·ªß v·ªõi tƒÉng c∆∞·ªùng ph√°p ch·∫ø, k·ª∑ lu·∫≠t, tr√°ch nhi·ªám c√¥ng d√¢n.  

Nguy√™n t·∫Øc tr·∫£ l·ªùi:
- D√πng **ti·∫øng Vi·ªát**, r√µ r√†ng, c√≥ tr·ªçng t√¢m.  
- Tr√¨nh b√†y b·∫±ng **Markdown** v·ªõi ti√™u ƒë·ªÅ, g·∫°ch ƒë·∫ßu d√≤ng, v√≠ d·ª• th·ª±c ti·ªÖn.  
- N·∫øu c√¢u h·ªèi n·∫±m ngo√†i ch·ªß ƒë·ªÅ D√¢n ch·ªß XHCN, h√£y n√≥i ng·∫Øn: ‚ÄúN·ªôi dung n√†y n·∫±m ngo√†i ph·∫°m vi b√†i h·ªçc hi·ªán t·∫°i.‚Äù  
- Khi c√≥ th·ªÉ, n√™u r√µ ph·∫ßn trong gi√°o tr√¨nh, v√≠ d·ª•: ‚Äú(Xem M·ª•c 3 ‚Äì D√¢n ch·ªß ƒë∆∞·ª£c th·ª±c h√†nh nh∆∞ th·∫ø n√†o, MLN131.docx)‚Äù.  
- Kh√¥ng b·ªãa ƒë·∫∑t, kh√¥ng tr√≠ch d·∫´n sai.  
`;

  const textModeInstruction = `
Tr√¨nh b√†y c√≥ c·∫•u tr√∫c nh∆∞ sau:
### T√≥m l∆∞·ª£c nhanh
- ‚Ä¶

### N·ªôi dung ch√≠nh
1) ‚Ä¶
2) ‚Ä¶

### Li√™n h·ªá ho·∫∑c v√≠ d·ª•
- ‚Ä¶

### Tham chi·∫øu gi√°o tr√¨nh
- M·ª•c t∆∞∆°ng ·ª©ng trong MLN131.docx.
`;

  const voiceModeInstruction = `
Tr·∫£ l·ªùi ng·∫Øn g·ªçn, t·ª± nhi√™n, th√¢n thi·ªán, nh∆∞ ƒëang tr√≤ chuy·ªán v·ªõi sinh vi√™n.
Gi·ªõi h·∫°n kho·∫£ng 100‚Äì150 t·ª´, th√™m v√≠ d·ª• g·∫ßn g≈©i (·ªü ƒë·ªãa ph∆∞∆°ng, tr∆∞·ªùng h·ªçc, tr√™n C·ªïng DVC...).
Gi·ªØ t√≠nh ch√≠nh x√°c h·ªçc thu·∫≠t, **in ƒë·∫≠m t·ª´ kh√≥a quan tr·ªçng** nh∆∞ **d√¢n ch·ªß**, **ph√°p quy·ªÅn**, **nh√¢n d√¢n**, **l√†m ch·ªß**.
K·∫øt th√∫c b·∫±ng m·ªôt c√¢u kh√≠ch l·ªá: ‚ÄúCh√∫ng ta c√πng h·ªçc ƒë·ªÉ hi·ªÉu r√µ h∆°n n·ªÅn d√¢n ch·ªß c·ªßa nh√¢n d√¢n nh√©!‚Äù
`;

  // ========= G·ª¨I C√ÇU H·ªéI =========
  const handleSend = async () => {
    if (!input.trim()) return;
    setMessages((prev) => [...prev, { role: "user", text: input }]);
    setLoading(true);

    try {
      let prompt = baseGuidelines;
      prompt += tab === "text" ? textModeInstruction : voiceModeInstruction;
      prompt += `

**C√¢u h·ªèi c·ªßa sinh vi√™n:**
${input}`;

      const response = await gemini.ask(prompt);
      setMessages((prev) => [...prev, { role: "bot", text: response }]);
      if (tab === "voice") speak(response);
    } catch (err: any) {
      setMessages((prev) => [
        ...prev,
        { role: "bot", text: "‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi API: " + err.message },
      ]);
    } finally {
      setLoading(false);
      setInput("");
    }
  };

  // ========= GIAO DI·ªÜN =========
  return (
    <>
      <motion.div
        className="w-full max-w-2xl min-h-[400px] flex flex-col bg-white/80 rounded-2xl shadow-2xl p-8 backdrop-blur border border-white/30"
        initial={{ opacity: 0, y: 40 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.7, delay: 0.2 }}
      >
        <h2 className="text-2xl font-bold mb-1 text-gray-800 text-center">
          Chatbot AI ‚Äì D√¢n ch·ªß X√£ h·ªôi Ch·ªß nghƒ©a üáªüá≥
        </h2>
        <p className="text-center text-gray-500 text-sm mb-4">
          Tr·ª£ l√Ω h·ªçc t·∫≠p h·ªçc ph·∫ßn <b>MLN131 ‚Äì Ch·ªß nghƒ©a x√£ h·ªôi khoa h·ªçc</b>.<br />
          Gi√∫p √¥n t·∫≠p, gi·∫£i th√≠ch l√Ω thuy·∫øt v√† li√™n h·ªá th·ª±c ti·ªÖn d·ªÖ hi·ªÉu.
        </p>

        {/* Tabs */}
        <div className="flex gap-4 mb-6 justify-center">
          {["text", "voice"].map((t) => (
            <button
              key={t}
              className={`px-6 py-2 rounded-lg border font-semibold text-lg transition-all duration-200 ${
                tab === t
                  ? "bg-blue-500 text-white shadow"
                  : "bg-white text-blue-500 border-blue-500 hover:bg-blue-50"
              } ${loading ? "opacity-50 cursor-not-allowed" : ""}`}
              onClick={() => handleTabChange(t as "text" | "voice")}
              disabled={loading}
            >
              {t === "text" ? "Tr·∫£ l·ªùi vƒÉn b·∫£n" : "Tr·∫£ l·ªùi gi·ªçng n√≥i"}
            </button>
          ))}
        </div>

        {/* Khung h·ªôi tho·∫°i */}
        <div className="flex-1 min-h-[180px] max-h-[500px] overflow-y-auto flex flex-col gap-3 mb-6">
          {tab === "text" ? (
            <>
              {messages.length === 0 && (
                <div className="text-gray-500 text-center mt-12 text-base select-none">
                  H√£y h·ªèi b·∫•t k·ª≥ ƒëi·ªÅu g√¨ v·ªÅ <b>D√¢n ch·ªß X√£ h·ªôi Ch·ªß nghƒ©a</b>!
                </div>
              )}
              {messages.map((msg, idx) => (
                <div
                  key={idx}
                  className={`flex items-start gap-3 ${
                    msg.role === "user" ? "justify-end" : "justify-start"
                  }`}
                >
                  {msg.role === "bot" && (
                    <span className="w-8 h-8 flex items-center justify-center rounded-full bg-gray-200">
                      ü§ñ
                    </span>
                  )}
                  <motion.div
                    className={`max-w-[85%] px-5 py-3 rounded-2xl text-base leading-relaxed shadow-sm cursor-pointer ${
                      msg.role === "user"
                        ? "bg-blue-500 text-white self-end rounded-br-none"
                        : "bg-white text-gray-900 self-start border border-gray-200 rounded-bl-none"
                    }`}
                    initial={{ opacity: 0, x: msg.role === "user" ? 40 : -40 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.3 }}
                    onClick={() => msg.role === "bot" && setModalText(msg.text)}
                  >
                    {msg.role === "user" ? (
                      msg.text
                    ) : (
                      <ReactMarkdown>{msg.text}</ReactMarkdown>
                    )}
                  </motion.div>
                  {msg.role === "user" && (
                    <span className="w-8 h-8 flex items-center justify-center rounded-full bg-blue-500 text-white">
                      üë§
                    </span>
                  )}
                </div>
              ))}
            </>
          ) : (
            <div className="flex flex-col items-center justify-center h-full min-h-[180px]">
              {speaking ? (
                <div className="flex flex-col items-center justify-center w-full h-full">
                  <span className="text-6xl mb-2 animate-pulse text-blue-500">
                    üîä
                  </span>
                  <span className="text-lg text-blue-600 font-semibold mb-4">
                    ƒêang ph√°t gi·ªçng n√≥i...
                  </span>
                  <button
                    className="px-6 py-2 rounded-lg bg-red-500 text-white font-semibold shadow hover:bg-red-600 transition"
                    onClick={() => {
                      window.speechSynthesis.cancel();
                      setSpeaking(false);
                    }}
                  >
                    D·ª´ng n√≥i
                  </button>
                </div>
              ) : (
                <span className="text-gray-400 text-base select-none">
                  H·ªèi chatbot ƒë·ªÉ nghe c√¢u tr·∫£ l·ªùi b·∫±ng gi·ªçng n√≥i üéß
                </span>
              )}
            </div>
          )}
        </div>

        {/* √î nh·∫≠p */}
        <div className="flex items-center gap-3 mt-auto">
          <input
            className="flex-1 px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400 bg-white text-base"
            placeholder="Nh·∫≠p c√¢u h·ªèi v·ªÅ D√¢n ch·ªß XHCN..."
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={(e) => e.key === "Enter" && handleSend()}
            disabled={loading}
          />
          <button
            className="p-3 rounded-full bg-blue-500 hover:bg-blue-600 transition text-white shadow disabled:opacity-60"
            onClick={handleSend}
            disabled={loading || !input.trim()}
          >
            {loading ? (
              <span className="w-5 h-5 animate-spin border-2 border-white border-t-transparent rounded-full inline-block"></span>
            ) : (
              <span>‚û§</span>
            )}
          </button>
        </div>
      </motion.div>

      {/* Modal hi·ªÉn th·ªã chi ti·∫øt */}
      <AnimatePresence>
        {modalText && (
          <motion.div
            className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={() => setModalText(null)}
          >
            <motion.div
              className="bg-white rounded-2xl shadow-2xl max-w-3xl w-full max-h-[80vh] overflow-y-auto p-6 relative"
              initial={{ scale: 0.8, opacity: 0, y: 30 }}
              animate={{ scale: 1, opacity: 1, y: 0 }}
              exit={{ scale: 0.8, opacity: 0, y: 30 }}
              onClick={(e) => e.stopPropagation()}
            >
              <div className="border-b pb-3 mb-4 flex justify-between items-center">
                <h2 className="text-xl font-semibold text-gray-800">Gi·∫£i th√≠ch chi ti·∫øt</h2>
                <div className="flex gap-2">
                  <button
                    className="px-3 py-1 text-sm rounded-lg bg-gray-100 hover:bg-gray-200"
                    onClick={() => {
                      navigator.clipboard.writeText(modalText);
                      setCopyText("Copied!");
                      setTimeout(() => setCopyText("Copy"), 2000);
                    }}
                  >
                    {copyText}
                  </button>
                  <button
                    className="text-gray-400 hover:text-gray-600"
                    onClick={() => setModalText(null)}
                  >
                    ‚úñ
                  </button>
                </div>
              </div>
              <div className="prose prose-lg max-w-none leading-relaxed text-gray-700">
                <ReactMarkdown>{modalText}</ReactMarkdown>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default VoiceChatbot;
